macOS_tests_steps: &macOS_tests_steps
  steps:
    - checkout
    - run:
        name: Building and running tests in debug mode with coverage
        command: |
          make test-debug \
            SWIFT_BUILD_FLAGS="-Xswiftc -warnings-as-errors" \
            SWIFT_TEST_FLAGS="--enable-code-coverage --build-path .build-test-debug"
          xcrun llvm-cov show \
            -instr-profile=.build-test-debug/debug/codecov/default.profdata \
            .build-test-debug/debug/OpenCombinePackageTests.xctest/Contents/MacOS/OpenCombinePackageTests \
            > coverage.txt
    - run:
        name: Building and running tests in debug mode with TSan
        command: |
          make test-debug-sanitize-thread \
            SWIFT_BUILD_FLAGS="-Xswiftc -warnings-as-errors" \
            SWIFT_TEST_FLAGS="--build-path .build-test-debug-sanitize-thread"
    - run:
        name: Building and running tests in release mode
        command: |
          make test-release \
            SWIFT_BUILD_FLAGS="-Xswiftc -warnings-as-errors" \
            SWIFT_TEST_FLAGS="--build-path .build-test-release"
    - run:
        name: Generating Xcode project
        command: make generate-xcodeproj SWIFT_BUILD_FLAGS="-Xswiftc -warnings-as-errors"
    - run:
        name: Building for testing on macOS with xcodebuild
        command: |
          set -o pipefail \
            && xcodebuild build-for-testing \
                  -scheme OpenCombine-Package \
                  -sdk macosx \
                  -derivedDataPath DerivedData \
            | tee xcodebuild_build-for-testing.log \
            | xcpretty
    - store_artifacts:
        path: xcodebuild_build-for-testing.log
    - run:
        name: Testing on macOS with xcodebuild
        command: |
          set -o pipefail \
            && xcodebuild test-without-building \
                  -scheme OpenCombine-Package \
                  -sdk macosx \
                  -derivedDataPath DerivedData \
            | tee xcodebuild_test-without-building.log \
            | xcpretty --report junit -o build/reports/results.xml
    - store_artifacts:
        path: xcodebuild_test-without-building.log
    - store_test_results:
        path: build/reports
    - run:
        name: Uploading code coverage
        command: |
          bash <(curl -s https://codecov.io/bash) -D DerivedData

ubuntu_tests_steps: &ubuntu_tests_steps
  steps:
    - checkout
    - run:
        name: Installing dependencies
        command: |
          apt update -y
          apt upgrade -y
          apt install -y curl python3.8
    - run:
        name: "Generating LinuxMain.swift"
        command: python3.8 utils/discover_tests.py
    - run:
        name: Building and running tests in debug mode with coverage
        command: |
          make test-debug \
            SWIFT_BUILD_FLAGS="-Xswiftc -warnings-as-errors" \
            SWIFT_TEST_FLAGS="--enable-code-coverage \
                              --disable-index-store \
                              --build-path .build-test-debug"
          llvm-cov show \
            -instr-profile=.build-test-debug/debug/codecov/default.profdata \
            .build-test-debug/debug/OpenCombinePackageTests.xctest \
            > coverage.txt
    - run:
        name: Building and running tests in debug mode with TSan
        command: |
          make test-debug-sanitize-thread \
            SWIFT_TEST_FLAGS="--disable-index-store \
                              --build-path .build-test-debug-sanitize-thread" \
    - run:
        name: Building and running tests in release mode
        command: |
          make test-release \
            SWIFT_BUILD_FLAGS="-Xswiftc -warnings-as-errors" \
            SWIFT_TEST_FLAGS="--build-path .build-test-release"
    - run:
        name: Uploading code coverage
        command: |
          bash <(curl -s https://codecov.io/bash)

version: 2
jobs:
  "Execute tests on macOS 10.15.0 (Xcode 11.3.0, Swift 5.1.3)":
    macos:
      xcode: "11.3.0"
    environment:
      SWIFT_VERSION: "5.1.3"
    <<: *macOS_tests_steps
  
  "Execute tests on macOS 10.15.0 (Xcode 12.1.0, Swift 5.3.0)":
    macos:
      xcode: "12.1.0"
    environment:
      SWIFT_VERSION: "5.3.0"
    <<: *macOS_tests_steps
  
  "Execute tests on macOS 11.4.0 (Xcode 12.5.1, Swift 5.4.0)":
    macos:
      xcode: "12.5.1"
    environment:
      SWIFT_VERSION: "5.4.0"
    <<: *macOS_tests_steps

  "Execute compatibility tests on iOS 14.5 (Xcode 12.5.1, Swift 5.4.0)":
    macos:
      xcode: "12.5.1"
    environment:
      SWIFT_VERSION: "5.4.0"
    steps:
      - checkout
      - run:
          name: Generating Xcode project
          command: make generate-compatibility-xcodeproj
      - run:
          name: Building for testing on iOS 14.5 with xcodebuild
          command: |
            set -o pipefail \
              && xcodebuild build-for-testing \
                   -scheme OpenCombine-Package \
                   -destination "platform=iOS Simulator,name=iPhone 12,OS=14.5" \
                   -derivedDataPath DerivedData \
              | tee xcodebuild_build-for-testing.log \
              | xcpretty
      - store_artifacts:
          path: xcodebuild_build-for-testing.log
      - run:
          name: Testing against Combine on iOS 14.5 with xcodebuild
          command: |
            set -o pipefail \
              && xcodebuild test-without-building \
                   -scheme OpenCombine-Package \
                   -destination "platform=iOS Simulator,name=iPhone 12,OS=14.5" \
                   -derivedDataPath DerivedData \
              | tee xcodebuild_test-without-building.log \
              | xcpretty --report junit -o build/reports/results.xml
      - store_artifacts:
          path: xcodebuild_test-without-building.log
      - store_test_results:
          path: build/reports

  "Execute compatibility tests on macOS 11.4.0 (Xcode 12.5.1, Swift 5.4.0)":
    macos:
      xcode: "12.5.1"
    environment:
      SWIFT_VERSION: "5.4.0"
    steps:
      - checkout
      - run:
          name: Testing against Combine on macOS 11.4.0
          command: |
            make test-compatibility

  "Execute tests on Ubuntu 18.04 (Swift 5.0)":
    docker:
      - image: swift:5.0-bionic
    environment:
      SWIFT_VERSION: "5.0"
    <<: *ubuntu_tests_steps

  "Execute tests on Ubuntu 18.04 (Swift 5.1)":
    docker:
      - image: swift:5.1-bionic
    environment:
      SWIFT_VERSION: "5.1"
    <<: *ubuntu_tests_steps

  "Execute tests on Ubuntu 18.04 (Swift 5.2)":
    docker:
      - image: swift:5.2-bionic
    environment:
      SWIFT_VERSION: "5.2"
    <<: *ubuntu_tests_steps

  "Execute tests on Ubuntu 18.04 (Swift 5.3)":
    docker:
      - image: swift:5.3-bionic
    environment:
      SWIFT_VERSION: "5.3"
    <<: *ubuntu_tests_steps
  
  "Execute tests on Ubuntu 18.04 (Swift 5.4)":
    docker:
      - image: swift:5.4-bionic
    environment:
      SWIFT_VERSION: "5.4"
    <<: *ubuntu_tests_steps

  "Execute tests on Ubuntu 18.04 (Swift 5.5)":
    docker:
      - image: swift:5.5-bionic
    environment:
      SWIFT_VERSION: "5.5"
    <<: *ubuntu_tests_steps

  "Run Pod spec lint":
    macos:
      xcode: "11.4.0"
    environment:
      HOMEBREW_NO_AUTO_UPDATE: "1"
    steps:
      - checkout
      - run:
          name: Pod lib lint
          command: |
            pod lib lint --allow-warnings --verbose

workflows:
  version: 2
  "OpenCombine: execute tests on macOS":
    jobs:
      - "Execute tests on macOS 10.15.0 (Xcode 11.3.0, Swift 5.1.3)"
      - "Execute tests on macOS 10.15.0 (Xcode 12.1.0, Swift 5.3.0)"
      - "Execute tests on macOS 11.4.0 (Xcode 12.5.1, Swift 5.4.0)"
  "OpenCombine: execute compatibility tests":
    jobs:
      - "Execute compatibility tests on macOS 11.4.0 (Xcode 12.5.1, Swift 5.4.0)"
  "OpenCombine: execute tests on Linux":
    jobs:
      - "Execute tests on Ubuntu 18.04 (Swift 5.0)"
      - "Execute tests on Ubuntu 18.04 (Swift 5.1)"
      - "Execute tests on Ubuntu 18.04 (Swift 5.2)"
      - "Execute tests on Ubuntu 18.04 (Swift 5.3)"
      - "Execute tests on Ubuntu 18.04 (Swift 5.4)"
      - "Execute tests on Ubuntu 18.04 (Swift 5.5)"
  "OpenCombine: validate podspec files":
    jobs:
      - "Run Pod spec lint"
